#!/usr/bin/env bash
#             __ _       _   _
#  _ __ ___  / _(_)     | |_| |___   __
# | '__/ _ \| |_| |_____| __| __\ \ / /
# | | | (_) |  _| |_____| |_| |_ \ V /
# |_|  \___/|_| |_|      \__|\__| \_/

# exit when any command fails
set -e

# TTV_USERNAME=""
ROFI_TTV_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/rofi-ttv"
USERNAME_FILE="${ROFI_TTV_DIR}/username"
TOKEN_FILE="${ROFI_TTV_DIR}/access_token"
TOKEN_EXPIRY_FILE="${ROFI_TTV_DIR}/access_token_expiry"
REFRESH_TOKEN_FILE="${ROFI_TTV_DIR}/refresh_token"

# Please don't use and/or abuse this client-id/secret-id, don't be the reason we
# can't have nice things.
# If you really want a twitch client-id/secret-id just go make your own
# here: https://dev.twitch.tv/console/apps/create
CLIENT_ID="703gzdr4b7lxupwtgsmqd9zp8ribnu"
CLIENT_SECRET="$(echo "M21keWl3MzA2ZjU2dDZ5eHE1bzk1eXA3dWcxOGlvCg==" | base64 -d -)"

echoexit() {
    # Print to stderr and exit
    printf "%s\n" "$*" 1>&2
    exit 1
}

# Dynamic menu command. Should read from stdin and output to stdout.
MENU_CMD=(rofi -dmenu -p "Twitch" -i)

# Prompt for user input. Should output to stdout.
INPUT_CMD=(rofi -dmenu -p "Search" -l 0)

view() {
    # View the twitch channel's stream.
    # Args:
    #    $1: channel name.

    local channel
    local url
    local resolutions
    local resolution
    channel="$1"
    url="https://twitch.tv/$channel"
    resolutions="$(youtube-dl -F "$url" | grep -v "\[" | tail -n +2 | tac)"
    resolution="$(printf "%s" "$resolutions" | "${MENU_CMD[@]}" | cut -d " " -f 1)"
    [ -n "$resolution" ] && youtube-dl "$url" -f "$resolution" -o - | mpv -
}

usage() {
    printf "Dynamic menu interface for Twitch.tv

To set your twitch username, either use the 'TTV_USERNAME'
environment variable or write it to '%s':

\$ echo \"your_username\" > %s

Usage:
  rofi-ttv [-hf] [followed|search [QUERY]]
    -h                         Display this help message.
    -f                         Menu format.
                               default: %s
  rofi-ttv search QUERY...     Search channels.
    QUERY                      Search query.
  rofi-ttv followed            Show followed channels.
" \
        "$USERNAME_FILE" "$USERNAME_FILE" "$FORMAT"
}

get_access_token() {
    local code
    local current_date
    local expiring
    local response

    current_date=$(date +%s)
    if [ -f "$TOKEN_FILE" ] && [ -f "$TOKEN_EXPIRY_FILE" ] && [ -f "$REFRESH_TOKEN_FILE" ]; then
        token_expiry=$(cat "$TOKEN_EXPIRY_FILE")
        if [ "$current_date" -lt "$token_expiry" ]; then
            # we have a valid token
            TOKEN="$(cat "$TOKEN_FILE")"
            return
        fi
    fi

    if [ -f "$REFRESH_TOKEN_FILE" ]; then
        # we only have a refresh token
        refresh_token="$(cat "$REFRESH_TOKEN_FILE")"
        response=$(curl --silent -X POST 'https://id.twitch.tv/oauth2/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&refresh_token=$refresh_token&grant_type=refresh_token")
        handle_error "$response"
    else
        # we should go from scratch
        echo "Authorization required" >&2
        echo "Go to: https://id.twitch.tv/oauth2/authorize?client_id=$CLIENT_ID&redirect_uri=http://localhost:8181/&response_type=code&scope=user:read:follows" >&2
        echo "Waiting for authorization..." >&2
        # start ncat to listen for code and close
        code="$(echo "Authorization successful!" | nc -l -p 8181 -c | grep -oP '(?<=code=).*?(?=&)')" || true
        response=$(curl --silent -X POST 'https://id.twitch.tv/oauth2/token' \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d "client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&code=$code&grant_type=authorization_code&redirect_uri=http://localhost:8181/")
        handle_error "$response"
    fi
    TOKEN="$(printf "%s" "$response" | jq -r '.access_token' | tee "$TOKEN_FILE")"
    printf "%s" "$response" | jq -r '.refresh_token' >"$REFRESH_TOKEN_FILE"
    expiring="$(printf "%s" "$response" | jq -r '.expires_in')"
    printf "%s" "$((current_date + expiring))" >"$TOKEN_EXPIRY_FILE"
}

handle_error() {
    local error
    error="$(printf "%s" "$1" | jq -r '.error')"
    [ "$error" = "Unauthorized" ] && rm "$TOKEN_FILE" "$TOKEN_EXPIRY_FILE"
    [ "$error" != "null" ] && echoexit "Error: $(printf "%s" "$1" | jq -r '.message')"
    return 0
}

get_user_id() {
    # Get user id.
    # Returns:
    #    string, user id.

    local response
    response="$(curl -s --location -G "https://api.twitch.tv/helix/users?login=$TTV_USERNAME" \
        --header "client-id: $CLIENT_ID" \
        --header "Authorization: Bearer $TOKEN")"
    handle_error "$response"
    printf "%s" "$response" | jq -r '.data | .[].id'
}

get_user_follows() {
    # Get user's follows.
    # Args:
    #    $1: user id.
    # Returns:
    #    formatted string of live channels

    local id
    local response
    local pagination
    id="$1"
    response="$(curl -s --location -G "https://api.twitch.tv/helix/streams/followed?user_id=$id&first=100" \
        --header "client-id: $CLIENT_ID" \
        --header "Authorization: Bearer $TOKEN")"
    handle_error "$response"
    printf "%s" "$response" | format_data
    pagination="$(printf "%s" "$response" | jq -r '.pagination.cursor')"
    while [ "$pagination" != "null" ]; do
        response="$(curl -s --location -G "https://api.twitch.tv/helix/streams/followed?user_id=$id&first=100&after=$pagination" \
            --header "client-id: $CLIENT_ID" \
            --header "Authorization: Bearer $TOKEN")"
        handle_error "$response"
        pagination="$(printf "%s" "$response" | jq -r '.pagination.cursor')"
        printf "%s" "$response" | format_data
    done
}

search() {
    # Search for twitch channels
    # Args:
    #    $1: query.
    # Returns:
    #    formatted string of live channels

    local query
    local response
    query="$1"
    response="$(curl -s --location -G "https://api.twitch.tv/helix/search/channels?live_only=true&first=20" \
        --data-urlencode "query=$query" \
        --header "client-id: $CLIENT_ID" \
        --header "Authorization: Bearer $TOKEN")"
    handle_error "$response"
    printf "%s" "$response" | format_data
}

format_data() {
    # Formats the live channels into strings ready for selection.
    jq -r ".data | .[] | \"$FORMAT\""
}

# Menu entry format
# available keys: see response keys at https://dev.twitch.tv/docs/api/reference#get-streams
FORMAT='\(.user_name//.display_name)\t\(.game_name[:30])\t\(.title[:50])\tðŸ‘¤ \(.viewer_count//"???")'
# Parse options to the `rofi-ttv` command
while getopts ":hf:" opt; do
    case ${opt} in
    h)
        usage
        exit 0
        ;;
    f)
        FORMAT="$OPTARG"
        ;;
    \?)
        printf "Invalid Option: -%s\n" "$OPTARG" 1>&2
        usage
        exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

# Checking dependencies:
type curl >/dev/null || echoexit "'curl' not found."
type jq >/dev/null || echoexit "'jq' not found."
type rofi >/dev/null || echoexit "'rofi' not found."
type youtube-dl >/dev/null || echoexit "'youtube-dl' not found."
type mpv >/dev/null || echoexit "'mpv' not found."
type ncat >/dev/null || echoexit "'ncat' not found."

subcommand="$1"
# Remove 'rofi-ttv' from the argument list
[ -n "$subcommand" ] && shift
case "$subcommand" in
# Parse options to the sub command
search)
    QUERY="$*"
    # No search query
    [ -z "$QUERY" ] && QUERY="$("${INPUT_CMD[@]}")"
    selected="Search"
    ;;

followed)
    [ "$#" -gt 0 ] && (
        printf "Invalid number of arguments\n" 1>&2
        usage
    ) && exit 1
    selected="Followed"
    ;;

"")
    # Let the user chose
    selected="$(printf "Followed\nSearch" | "${MENU_CMD[@]}" -l 2)"
    # User input search query
    [ "$selected" = "Search" ] && QUERY="$("${INPUT_CMD[@]}")"
    ;;

*)
    printf "Invalid argument \"%s\" should be either 'search' or 'followed'.\n" "$subcommand" 1>&2
    usage
    exit 1
    ;;
esac

# Make the directory if it does not exist.
[ ! -d "$ROFI_TTV_DIR" ] && mkdir "$ROFI_TTV_DIR"

# Access token
get_access_token

# Get ids of searched/followed channels
if [ "$selected" = "Followed" ]; then
    if [ -z "$TTV_USERNAME" ]; then
        if [ -f "$USERNAME_FILE" ]; then
            TTV_USERNAME="$(cat "$USERNAME_FILE")"
        else
            echoexit "Can't find username, try \"echo 'your_username' > $USERNAME_FILE\""
        fi
    fi
    USER_ID="$(get_user_id)"
    STREAMS="$(get_user_follows "$USER_ID")"

elif [ "$selected" = "Search" ]; then
    STREAMS="$(search "$QUERY")"
fi

# Create menu entries
CHOICES="$(echo "$STREAMS" | column -t -s "$(printf '\t')")" # make nice columns
# Select channel
CHANNEL="$(printf "%s" "$CHOICES" | "${MENU_CMD[@]}" | cut -d " " -f 1)"
# View stream
[ -n "$CHANNEL" ] && view "$CHANNEL"
