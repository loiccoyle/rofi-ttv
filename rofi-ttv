#!/bin/sh
#             __ _       _   _
#  _ __ ___  / _(_)     | |_| |___   __
# | '__/ _ \| |_| |_____| __| __\ \ / /
# | | | (_) |  _| |_____| |_| |_ \ V /
# |_|  \___/|_| |_|      \__|\__| \_/

# any failure in piped commands aborts pipe
set -o pipefail
# exit when any command fails
set -e

# TTV_USERNAME=""
ROFI_TTV_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/rofi-ttv"
USERNAME_FILE="${ROFI_TTV_DIR}/username"
TOKEN_FILE="${ROFI_TTV_DIR}/access_token"
TOKEN_EXPIRY_FILE="${ROFI_TTV_DIR}/access_token_expiry"

# Please don't use and/or abuse this client-id/secret-id, don't be the reason we
# can't have nice things.
# If you really want a twitch client-id/secret-id just go make your own
# here: https://dev.twitch.tv/console/apps/create
CLIENT_ID="703gzdr4b7lxupwtgsmqd9zp8ribnu"
CLIENT_SECRET="3mdyiw306f56t6yxq5o95yp7ug18io"

# menu entry format
FORMAT='"\(.user_name)\t\(.game_name)\t\(.title[:50])\tðŸ‘€ \(.viewer_count)"'
# available keys: see response keys at https://dev.twitch.tv/docs/api/reference#get-streams

echoexit() {
    # Print to stderr and exit
    echo "$@" 1>&2
    exit 1
}

# Checking dependencies:
whereis curl > /dev/null || echoexit "'curl' not found."
whereis jq > /dev/null || echoexit "'jq' not found."
whereis rofi > /dev/null || echoexit "'rofi' not found."
whereis youtube-dl > /dev/null || echoexit "'youtube-dl' not found."
whereis mpv > /dev/null || echoexit "'mpv' not found."

function menu (){
    # Dynamic menu command. Should read from stdin and output to stdout.

    rofi -dmenu -p "Select"
}

function input (){
    # Prompt for user input. Should output to stdout.

    rofi -dmenu -p "Search" -lines 0
}

function viewer (){
    # View the twitch channel's stream.
    # Args:
    #    $1: channel name.

    local channel="$1"
    local url="https://twitch.tv/$channel"
    local resolutions="$(youtube-dl -F "$url" | grep -v "\[" | tail -n +2)"
    local resolution="$(echo "$resolutions" | menu | cut -d " " -f 1)"

    youtube-dl "$url" -f $resolution -o - | mpv -
}

usage() {
    echo "Dynamic menu interface for Twitch.tv

To set your twitch username, either use the 'TTV_USERNAME'
environment variable or write it to \"$USERNAME_FILE\":

\$ echo \"your_username\" > $USERNAME_FILE

Usage:
  rofi-ttv [-h]
    -h                                 Display this help message.
  rofi-ttv search QUERY...             Search channels.
    QUERY                              Search query.
  rofi-ttv followed                    Show followed channels."
}

function get_access_token (){
    # Get application access token.
    # Returns:
    #    string, Bearer token.
    local current_date=$(date +%s)
    [ -f $TOKEN_FILE ] && [ -f $TOKEN_EXPIRY_FILE ] && local token="$(cat "$TOKEN_FILE")" && local token_expiry=$(cat "$TOKEN_EXPIRY_FILE")

    # if the token variables are populated and we are not past the expiry date
    [ ! -z $token_expiry ] && [ ! -z $token ] && [ $current_date -lt $token_expiry ] && echo "$token" && return

    # otherwise generate a new one
    local response="$(curl -s --location -X POST "https://id.twitch.tv/oauth2/token?client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&grant_type=client_credentials")"
    local token="$(echo "$response" | jq -r '.access_token')"
    local expiring="$(echo "$response" | jq -r '.expires_in')"
    # write to file
    echo "$token" > $TOKEN_FILE
    echo "$(($current_date + $expiring))" > $TOKEN_EXPIRY_FILE
    echo "$token"
}

function get_user_id (){
    # Get user id.
    # Returns:
    #    string, user id.

    local response="$(curl -s --location -G "https://api.twitch.tv/helix/users?login=$TTV_USERNAME"\
        --header "client-id: $CLIENT_ID"\
        --header "Authorization: Bearer $TOKEN")"
    echo "$response" | jq  -r '.data | .[].id'
}

function get_user_follows (){
    # Get user's follows.
    # Args:
    #    $1: user id.
    # Returns:
    #    string of user ids.

    local id="$1"
    local response="$(curl -s --location -G "https://api.twitch.tv/helix/users/follows?from_id=$id&first=100"\
        --header "client-id: $CLIENT_ID"\
        --header "Authorization: Bearer $TOKEN")"
    echo "$response" | jq  -r '.data | .[].to_id'
    local pagination="$(echo "$response" | jq -r '.pagination.cursor')"
    while [ "$pagination" != "null" ]
    do
        response="$(curl -s --location -G "https://api.twitch.tv/helix/users/follows?from_id=$id&first=100&after=$pagination"\
            --header "client-id: $CLIENT_ID"\
            --header "Authorization: Bearer $TOKEN")"
        pagination="$(echo "$response" | jq -r '.pagination.cursor')"
        echo "$response" | jq -r '.data | .[].to_id'
    done
}

function search (){
    # Search for twitch channels
    # Args:
    #    $1: query.
    # Returns:
    #    string of user ids.

    local query="$1"
    local response="$(curl -s --location -G "https://api.twitch.tv/helix/search/channels?live_only=true&first=20"\
        --data-urlencode "query=$query"\
        --header "client-id: $CLIENT_ID"\
        --header "Authorization: Bearer $TOKEN")"
    echo "$response" | jq -r '.data | .[].id'
}

function format_live (){
    # Formats the live channels into strings ready for selection.
    # Args:
    #    $1: string of user ids
    # Returns:
    #    string, each line is a channel.

    local follows=($1)
    local end=$((1 + ${#follows[@]}/100))
    local jq_cmd='.[] | '"$FORMAT"
    for ((i = 0; i<$end; i++));
    do
        local follows_url="user_id=$(echo ${follows[@]:$(($i*100)):100} | sed 's/ /\&user_id=/g')"
        # get live channels
        local response="$(curl -s --location -G "https://api.twitch.tv/helix/streams?$follows_url"\
            --header "client-id: $CLIENT_ID"\
            --header "Authorization: Bearer $TOKEN")"
        local data="$(echo "$response" | jq -r '.data')"
        # remove \n in titles
        echo "$data" | sed -e 's/\\n//g' | jq -r ". [] | $FORMAT"
    done
}


# Parse options to the `rofi-ttv` command
while getopts ":h" opt; do
    case ${opt} in
        h )
            usage
            exit 0
            ;;
        \? )
            echo "Invalid Option: -$OPTARG" 1>&2
            usage
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

subcommand="$1"
# Remove 'rofi-ttv' from the argument list
[ ! -z $subcommand ] && shift
case "$subcommand" in
    # Parse options to the sub command
    search )
        QUERY="$@"
        # no search query
        [ -z "$QUERY" ] && QUERY="$(input)"
        selected="Search"
        ;;

    followed )
        [ "$#" -gt 0 ] && ( echo "Invalid number of arguments" 1>&2; usage ) && exit 1
        selected="Followed"
        ;;

    "" )
        # let the user chose
        selected="$(echo -e "Search\nFollowed" | menu)"
        # search query
        [ "$selected" == "Search" ] && QUERY="$(input)"
        ;;

    * )
        echo "Invalid argument \"$1\" should be either 'search' or 'followed'."
        usage
        exit 1
        ;;
esac

# Make the directory if it does not exist.
[ ! -d "$ROFI_TTV_DIR" ] && mkdir "$ROFI_TTV_DIR"

# Access token
TOKEN="$(get_access_token)"

# Get ids of searched/followed channels
if [ "$selected" == "Followed" ]; then
    if [ -z "$TTV_USERNAME" ]; then
        [ -f "$USERNAME_FILE" ] && TTV_USERNAME="$(cat $USERNAME_FILE)" || echoexit "Can't find username, try \"echo 'your_username' > $USERNAME_FILE\""
    fi
    IDS="$(get_user_follows "$(get_user_id)")"

elif [ "$selected" == "Search" ]; then
    IDS="$(search "$QUERY")"
fi

# Create menu entries
CHOICES="$(format_live "$IDS" | column -t -s "$(printf '\t')")"  # make nice columns
# Select channel
CHANNEL="$(echo "$CHOICES" | menu | cut -d " " -f 1)"
# view stream
viewer "$CHANNEL"
